---
layout: post
title:  "Go语言入门系列(二)——生成随机数
date:   2016-04-17 00:54:39 +0800
category: Go语言
---
<p>
　　今天学习了Go语言中如何用rand包生成随机数的方法,在这里分享给大家.Go语言因为运行的环境是确定性的,
所以如果要生成随机数,需要提供一个随机数种子.
{% highlight ruby %}
package main

import(
    "fmt"
    "math/rand"
)

func main() {
    fmt.Println("The random number is ", rand.Intn(10))   //这里不管怎么运行,都是默认取1到10中的第一个数字1
}
{% endhighlight %}
　　那么,我们要怎么做使得上述程序每次的运行结果出来的随机数都不一样呢?很简单,只要使得rand这个包在每次初始化的时候
值都发生变化就可以了.这里我们要用到time这个包,代码如下:
{% highlight ruby %}
package main

import(
    "fmt"
    "math/rand"
    "time"
)

func main() {
    r := rand.New(rand.NewSource(time.Now().UnixNano()))
    fmt.Println("The random number is ", rand.Intn(10))
}
{% endhighlight %}
　　这里的rand.New()的意思重新初始化一个随机数的源,而rand.NewSource就是这个源,这个源是通过time.Now().UnixNano()
获取当前时间的纳秒来生成的.这样就保证了每次程序运行的时候都有不一样的随机数源,就可以让每次打印出来的随机数都不同了.这里只是
生成随机数的一种方法而已,大致思路都是差不多的,只要保证每次的随机数源不同就可以了.<br />
　　Ps:<br/>
　　1.大家可以发现Go语言的代码基本上都不用分号作为一行代码的结尾,这是因为Go语言的编译器会自动帮我们加上分号<br/>
　　2.Go语言导包的时候,必须要确保这个包在程序里有被引用到,比如刚刚导入了time这个包,那么在程序里就必须使用time这个包里的函数,
否则会报'imported and not used: "time"'的错误导致进程退出
</p>
